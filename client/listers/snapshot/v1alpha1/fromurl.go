/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vultr-api/apis/snapshot/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FromURLLister helps list FromURLs.
// All objects returned here must be treated as read-only.
type FromURLLister interface {
	// List lists all FromURLs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FromURL, err error)
	// FromURLs returns an object that can list and get FromURLs.
	FromURLs(namespace string) FromURLNamespaceLister
	FromURLListerExpansion
}

// fromURLLister implements the FromURLLister interface.
type fromURLLister struct {
	indexer cache.Indexer
}

// NewFromURLLister returns a new FromURLLister.
func NewFromURLLister(indexer cache.Indexer) FromURLLister {
	return &fromURLLister{indexer: indexer}
}

// List lists all FromURLs in the indexer.
func (s *fromURLLister) List(selector labels.Selector) (ret []*v1alpha1.FromURL, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FromURL))
	})
	return ret, err
}

// FromURLs returns an object that can list and get FromURLs.
func (s *fromURLLister) FromURLs(namespace string) FromURLNamespaceLister {
	return fromURLNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// FromURLNamespaceLister helps list and get FromURLs.
// All objects returned here must be treated as read-only.
type FromURLNamespaceLister interface {
	// List lists all FromURLs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.FromURL, err error)
	// Get retrieves the FromURL from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.FromURL, error)
	FromURLNamespaceListerExpansion
}

// fromURLNamespaceLister implements the FromURLNamespaceLister
// interface.
type fromURLNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all FromURLs in the indexer for a given namespace.
func (s fromURLNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.FromURL, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.FromURL))
	})
	return ret, err
}

// Get retrieves the FromURL from the indexer for a given namespace and name.
func (s fromURLNamespaceLister) Get(name string) (*v1alpha1.FromURL, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("fromurl"), name)
	}
	return obj.(*v1alpha1.FromURL), nil
}
