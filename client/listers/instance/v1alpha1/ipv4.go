/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vultr-api/apis/instance/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ipv4Lister helps list Ipv4s.
// All objects returned here must be treated as read-only.
type Ipv4Lister interface {
	// List lists all Ipv4s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv4, err error)
	// Ipv4s returns an object that can list and get Ipv4s.
	Ipv4s(namespace string) Ipv4NamespaceLister
	Ipv4ListerExpansion
}

// ipv4Lister implements the Ipv4Lister interface.
type ipv4Lister struct {
	indexer cache.Indexer
}

// NewIpv4Lister returns a new Ipv4Lister.
func NewIpv4Lister(indexer cache.Indexer) Ipv4Lister {
	return &ipv4Lister{indexer: indexer}
}

// List lists all Ipv4s in the indexer.
func (s *ipv4Lister) List(selector labels.Selector) (ret []*v1alpha1.Ipv4, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv4))
	})
	return ret, err
}

// Ipv4s returns an object that can list and get Ipv4s.
func (s *ipv4Lister) Ipv4s(namespace string) Ipv4NamespaceLister {
	return ipv4NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ipv4NamespaceLister helps list and get Ipv4s.
// All objects returned here must be treated as read-only.
type Ipv4NamespaceLister interface {
	// List lists all Ipv4s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv4, err error)
	// Get retrieves the Ipv4 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ipv4, error)
	Ipv4NamespaceListerExpansion
}

// ipv4NamespaceLister implements the Ipv4NamespaceLister
// interface.
type ipv4NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ipv4s in the indexer for a given namespace.
func (s ipv4NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv4, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv4))
	})
	return ret, err
}

// Get retrieves the Ipv4 from the indexer for a given namespace and name.
func (s ipv4NamespaceLister) Get(name string) (*v1alpha1.Ipv4, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipv4"), name)
	}
	return obj.(*v1alpha1.Ipv4), nil
}
