/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vultr-api/apis/kubernetes/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodePoolsLister helps list NodePoolses.
// All objects returned here must be treated as read-only.
type NodePoolsLister interface {
	// List lists all NodePoolses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodePools, err error)
	// NodePoolses returns an object that can list and get NodePoolses.
	NodePoolses(namespace string) NodePoolsNamespaceLister
	NodePoolsListerExpansion
}

// nodePoolsLister implements the NodePoolsLister interface.
type nodePoolsLister struct {
	indexer cache.Indexer
}

// NewNodePoolsLister returns a new NodePoolsLister.
func NewNodePoolsLister(indexer cache.Indexer) NodePoolsLister {
	return &nodePoolsLister{indexer: indexer}
}

// List lists all NodePoolses in the indexer.
func (s *nodePoolsLister) List(selector labels.Selector) (ret []*v1alpha1.NodePools, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodePools))
	})
	return ret, err
}

// NodePoolses returns an object that can list and get NodePoolses.
func (s *nodePoolsLister) NodePoolses(namespace string) NodePoolsNamespaceLister {
	return nodePoolsNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodePoolsNamespaceLister helps list and get NodePoolses.
// All objects returned here must be treated as read-only.
type NodePoolsNamespaceLister interface {
	// List lists all NodePoolses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.NodePools, err error)
	// Get retrieves the NodePools from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.NodePools, error)
	NodePoolsNamespaceListerExpansion
}

// nodePoolsNamespaceLister implements the NodePoolsNamespaceLister
// interface.
type nodePoolsNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodePoolses in the indexer for a given namespace.
func (s nodePoolsNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.NodePools, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NodePools))
	})
	return ret, err
}

// Get retrieves the NodePools from the indexer for a given namespace and name.
func (s nodePoolsNamespaceLister) Get(name string) (*v1alpha1.NodePools, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("nodepools"), name)
	}
	return obj.(*v1alpha1.NodePools), nil
}
