/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vultr-api/apis/reverse/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ipv6Lister helps list Ipv6s.
// All objects returned here must be treated as read-only.
type Ipv6Lister interface {
	// List lists all Ipv6s in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6, err error)
	// Ipv6s returns an object that can list and get Ipv6s.
	Ipv6s(namespace string) Ipv6NamespaceLister
	Ipv6ListerExpansion
}

// ipv6Lister implements the Ipv6Lister interface.
type ipv6Lister struct {
	indexer cache.Indexer
}

// NewIpv6Lister returns a new Ipv6Lister.
func NewIpv6Lister(indexer cache.Indexer) Ipv6Lister {
	return &ipv6Lister{indexer: indexer}
}

// List lists all Ipv6s in the indexer.
func (s *ipv6Lister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6))
	})
	return ret, err
}

// Ipv6s returns an object that can list and get Ipv6s.
func (s *ipv6Lister) Ipv6s(namespace string) Ipv6NamespaceLister {
	return ipv6NamespaceLister{indexer: s.indexer, namespace: namespace}
}

// Ipv6NamespaceLister helps list and get Ipv6s.
// All objects returned here must be treated as read-only.
type Ipv6NamespaceLister interface {
	// List lists all Ipv6s in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Ipv6, err error)
	// Get retrieves the Ipv6 from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Ipv6, error)
	Ipv6NamespaceListerExpansion
}

// ipv6NamespaceLister implements the Ipv6NamespaceLister
// interface.
type ipv6NamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ipv6s in the indexer for a given namespace.
func (s ipv6NamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ipv6, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ipv6))
	})
	return ret, err
}

// Get retrieves the Ipv6 from the indexer for a given namespace and name.
func (s ipv6NamespaceLister) Get(name string) (*v1alpha1.Ipv6, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipv6"), name)
	}
	return obj.(*v1alpha1.Ipv6), nil
}
