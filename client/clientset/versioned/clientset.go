/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	barev1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/bare/v1alpha1"
	blockv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/block/v1alpha1"
	dnsv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/dns/v1alpha1"
	firewallv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/firewall/v1alpha1"
	instancev1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/instance/v1alpha1"
	isov1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/iso/v1alpha1"
	loadv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/load/v1alpha1"
	objectv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/object/v1alpha1"
	privatev1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/private/v1alpha1"
	reservedv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/reserved/v1alpha1"
	reversev1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/reverse/v1alpha1"
	snapshotv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/snapshot/v1alpha1"
	sshv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/ssh/v1alpha1"
	startupv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/startup/v1alpha1"
	userv1alpha1 "kubeform.dev/provider-vultr-api/client/clientset/versioned/typed/user/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	BareV1alpha1() barev1alpha1.BareV1alpha1Interface
	BlockV1alpha1() blockv1alpha1.BlockV1alpha1Interface
	DnsV1alpha1() dnsv1alpha1.DnsV1alpha1Interface
	FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface
	InstanceV1alpha1() instancev1alpha1.InstanceV1alpha1Interface
	IsoV1alpha1() isov1alpha1.IsoV1alpha1Interface
	LoadV1alpha1() loadv1alpha1.LoadV1alpha1Interface
	ObjectV1alpha1() objectv1alpha1.ObjectV1alpha1Interface
	PrivateV1alpha1() privatev1alpha1.PrivateV1alpha1Interface
	ReservedV1alpha1() reservedv1alpha1.ReservedV1alpha1Interface
	ReverseV1alpha1() reversev1alpha1.ReverseV1alpha1Interface
	SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface
	SshV1alpha1() sshv1alpha1.SshV1alpha1Interface
	StartupV1alpha1() startupv1alpha1.StartupV1alpha1Interface
	UserV1alpha1() userv1alpha1.UserV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	bareV1alpha1     *barev1alpha1.BareV1alpha1Client
	blockV1alpha1    *blockv1alpha1.BlockV1alpha1Client
	dnsV1alpha1      *dnsv1alpha1.DnsV1alpha1Client
	firewallV1alpha1 *firewallv1alpha1.FirewallV1alpha1Client
	instanceV1alpha1 *instancev1alpha1.InstanceV1alpha1Client
	isoV1alpha1      *isov1alpha1.IsoV1alpha1Client
	loadV1alpha1     *loadv1alpha1.LoadV1alpha1Client
	objectV1alpha1   *objectv1alpha1.ObjectV1alpha1Client
	privateV1alpha1  *privatev1alpha1.PrivateV1alpha1Client
	reservedV1alpha1 *reservedv1alpha1.ReservedV1alpha1Client
	reverseV1alpha1  *reversev1alpha1.ReverseV1alpha1Client
	snapshotV1alpha1 *snapshotv1alpha1.SnapshotV1alpha1Client
	sshV1alpha1      *sshv1alpha1.SshV1alpha1Client
	startupV1alpha1  *startupv1alpha1.StartupV1alpha1Client
	userV1alpha1     *userv1alpha1.UserV1alpha1Client
}

// BareV1alpha1 retrieves the BareV1alpha1Client
func (c *Clientset) BareV1alpha1() barev1alpha1.BareV1alpha1Interface {
	return c.bareV1alpha1
}

// BlockV1alpha1 retrieves the BlockV1alpha1Client
func (c *Clientset) BlockV1alpha1() blockv1alpha1.BlockV1alpha1Interface {
	return c.blockV1alpha1
}

// DnsV1alpha1 retrieves the DnsV1alpha1Client
func (c *Clientset) DnsV1alpha1() dnsv1alpha1.DnsV1alpha1Interface {
	return c.dnsV1alpha1
}

// FirewallV1alpha1 retrieves the FirewallV1alpha1Client
func (c *Clientset) FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface {
	return c.firewallV1alpha1
}

// InstanceV1alpha1 retrieves the InstanceV1alpha1Client
func (c *Clientset) InstanceV1alpha1() instancev1alpha1.InstanceV1alpha1Interface {
	return c.instanceV1alpha1
}

// IsoV1alpha1 retrieves the IsoV1alpha1Client
func (c *Clientset) IsoV1alpha1() isov1alpha1.IsoV1alpha1Interface {
	return c.isoV1alpha1
}

// LoadV1alpha1 retrieves the LoadV1alpha1Client
func (c *Clientset) LoadV1alpha1() loadv1alpha1.LoadV1alpha1Interface {
	return c.loadV1alpha1
}

// ObjectV1alpha1 retrieves the ObjectV1alpha1Client
func (c *Clientset) ObjectV1alpha1() objectv1alpha1.ObjectV1alpha1Interface {
	return c.objectV1alpha1
}

// PrivateV1alpha1 retrieves the PrivateV1alpha1Client
func (c *Clientset) PrivateV1alpha1() privatev1alpha1.PrivateV1alpha1Interface {
	return c.privateV1alpha1
}

// ReservedV1alpha1 retrieves the ReservedV1alpha1Client
func (c *Clientset) ReservedV1alpha1() reservedv1alpha1.ReservedV1alpha1Interface {
	return c.reservedV1alpha1
}

// ReverseV1alpha1 retrieves the ReverseV1alpha1Client
func (c *Clientset) ReverseV1alpha1() reversev1alpha1.ReverseV1alpha1Interface {
	return c.reverseV1alpha1
}

// SnapshotV1alpha1 retrieves the SnapshotV1alpha1Client
func (c *Clientset) SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface {
	return c.snapshotV1alpha1
}

// SshV1alpha1 retrieves the SshV1alpha1Client
func (c *Clientset) SshV1alpha1() sshv1alpha1.SshV1alpha1Interface {
	return c.sshV1alpha1
}

// StartupV1alpha1 retrieves the StartupV1alpha1Client
func (c *Clientset) StartupV1alpha1() startupv1alpha1.StartupV1alpha1Interface {
	return c.startupV1alpha1
}

// UserV1alpha1 retrieves the UserV1alpha1Client
func (c *Clientset) UserV1alpha1() userv1alpha1.UserV1alpha1Interface {
	return c.userV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.bareV1alpha1, err = barev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.blockV1alpha1, err = blockv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dnsV1alpha1, err = dnsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.firewallV1alpha1, err = firewallv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.instanceV1alpha1, err = instancev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.isoV1alpha1, err = isov1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.loadV1alpha1, err = loadv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.objectV1alpha1, err = objectv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.privateV1alpha1, err = privatev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.reservedV1alpha1, err = reservedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.reverseV1alpha1, err = reversev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.snapshotV1alpha1, err = snapshotv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.sshV1alpha1, err = sshv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.startupV1alpha1, err = startupv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.userV1alpha1, err = userv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.bareV1alpha1 = barev1alpha1.NewForConfigOrDie(c)
	cs.blockV1alpha1 = blockv1alpha1.NewForConfigOrDie(c)
	cs.dnsV1alpha1 = dnsv1alpha1.NewForConfigOrDie(c)
	cs.firewallV1alpha1 = firewallv1alpha1.NewForConfigOrDie(c)
	cs.instanceV1alpha1 = instancev1alpha1.NewForConfigOrDie(c)
	cs.isoV1alpha1 = isov1alpha1.NewForConfigOrDie(c)
	cs.loadV1alpha1 = loadv1alpha1.NewForConfigOrDie(c)
	cs.objectV1alpha1 = objectv1alpha1.NewForConfigOrDie(c)
	cs.privateV1alpha1 = privatev1alpha1.NewForConfigOrDie(c)
	cs.reservedV1alpha1 = reservedv1alpha1.NewForConfigOrDie(c)
	cs.reverseV1alpha1 = reversev1alpha1.NewForConfigOrDie(c)
	cs.snapshotV1alpha1 = snapshotv1alpha1.NewForConfigOrDie(c)
	cs.sshV1alpha1 = sshv1alpha1.NewForConfigOrDie(c)
	cs.startupV1alpha1 = startupv1alpha1.NewForConfigOrDie(c)
	cs.userV1alpha1 = userv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.bareV1alpha1 = barev1alpha1.New(c)
	cs.blockV1alpha1 = blockv1alpha1.New(c)
	cs.dnsV1alpha1 = dnsv1alpha1.New(c)
	cs.firewallV1alpha1 = firewallv1alpha1.New(c)
	cs.instanceV1alpha1 = instancev1alpha1.New(c)
	cs.isoV1alpha1 = isov1alpha1.New(c)
	cs.loadV1alpha1 = loadv1alpha1.New(c)
	cs.objectV1alpha1 = objectv1alpha1.New(c)
	cs.privateV1alpha1 = privatev1alpha1.New(c)
	cs.reservedV1alpha1 = reservedv1alpha1.New(c)
	cs.reverseV1alpha1 = reversev1alpha1.New(c)
	cs.snapshotV1alpha1 = snapshotv1alpha1.New(c)
	cs.sshV1alpha1 = sshv1alpha1.New(c)
	cs.startupV1alpha1 = startupv1alpha1.New(c)
	cs.userV1alpha1 = userv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
